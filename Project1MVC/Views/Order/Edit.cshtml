@model Project1MVC.Models.OrderWrapper

@{
    ViewBag.Title = "Edit Order";
}

<h2>Edit Order</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(o => o.OrderProp.Id)

    <div class="form-group">
        @Html.LabelFor(model => model.OrderProp.SupplierId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.OrderProp.SupplierId, new SelectList(ViewBag.SuppliersList, "SupplierId", "Name", Model.OrderProp.SupplierId), "Select a supplier", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.OrderProp.SupplierId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OrderProp.OrderDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OrderProp.OrderDate, new { htmlAttributes = new { @class = "form-control datepicker", @Value = Model.OrderProp.OrderDate.ToString("yyyy-MM-dd") } })
            @Html.ValidationMessageFor(model => model.OrderProp.OrderDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OrderProp.EffectiveDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OrderProp.EffectiveDate, new { htmlAttributes = new { @class = "form-control datepicker", @Value = Model.OrderProp.EffectiveDate.ToString("yyyy-MM-dd") } })
            @Html.ValidationMessageFor(model => model.OrderProp.EffectiveDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OrderProp.IsOrderComplete, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.CheckBoxFor(model => model.OrderProp.IsOrderComplete, new { data_toggle = "toggle", data_on = "Yes", data_off = "Not Yet", data_onstyle = "success", data_offstyle = "warning", })
            @Html.ValidationMessageFor(model => model.OrderProp.IsOrderComplete, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OrderProp.AutomaticDispatch, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.CheckBoxFor(model => model.OrderProp.AutomaticDispatch, new { data_toggle = "toggle", data_on = "Yes", data_off = "No", data_onstyle = "success", data_offstyle = "warning", })
            @Html.ValidationMessageFor(model => model.OrderProp.AutomaticDispatch, "", new { @class = "text-danger" })
        </div>
    </div>

    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.EquipmentOrderProp[0].EquipmentBrand)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EquipmentOrderProp[0].EquipmentModel)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EquipmentOrderProp[0].Qty)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EquipmentOrderProp[0].UnitPrice)
            </th>
            <th></th>
        </tr>

        @for (int i = 0; i < Model.EquipmentOrderProp.Length; i++)
        {
            var item = Model.EquipmentOrderProp[i];
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.EquipmentBrand)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EquipmentModel)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Qty)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UnitPrice)
                </td>
                <td>
                    @Html.ActionLink("Edit", "EditEquipment", new { id = Model.OrderProp.Id, equipmentIndex = i })
                    @*@Html.ActionLink("Delete", "DeleteEquipment", new { id = Model.OrderProp.Id, equipmentIndex = i })*@
                </td>
            </tr>
        }

    </table>


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/select2")

    <script>
        $("#OrderProp_SupplierId").select2();
        const formEl = document.querySelector("form");
        const orderDateEl = document.querySelector("#OrderProp_OrderDate");
        const effectiveDateEl = document.querySelector("#OrderProp_EffectiveDate");
        const isOrderCompleteEl = document.querySelector("#OrderProp_IsOrderComplete");
        const automaticDispatchEl = document.querySelector("#OrderProp_AutomaticDispatch");
        const supplierEl = document.querySelector("#OrderProp_SupplierId");

        orderDateEl.addEventListener("change", (e) => {
            const today = new Date();
            const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();
            if (e.target.value > date) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Order date cannot be in the future',
                });
            }
        });

        effectiveDateEl.addEventListener("change", (e) => {
            const orderDate = orderDateEl.value;
            if (e.target.value < orderDate) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Effective date cannot be less than order date',
                });
            }
        });

        formEl.addEventListener("submit", (e) => {
            e.preventDefault();
            const orderDate = orderDateEl.value;
            const effectiveDate = effectiveDateEl.value;
            const today = new Date();
            const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();
            const supplier = supplierEl.value;
            if (supplier == "" || supplier == null) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Please select a supplier',
                });
            }
            else if (orderDate > date) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Order date cannot be in the future',
                });
            }
            else if (effectiveDate < orderDate) {
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Effective date cannot be less than order date',
                });
            } else {
                const orderId = +document.querySelector("#OrderProp_Id").value;
                const editedData = { EquipmentOrderProp: null, OrderProp: { AutomaticDispatch: automaticDispatchEl.checked, EffectiveDate: effectiveDateEl.value, IsOrderComplete: isOrderCompleteEl.checked, OrderDate: orderDateEl.value, SupplierId: supplierEl.value, Id: orderId } }
                console.log(JSON.stringify({ id: orderId, orderWrapper: editedData }));
                $.ajax({
                    type: "POST",
                    url: "/Order/Edit",
                    data: JSON.stringify({ id: orderId, orderWrapper: editedData }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        Swal.fire({
                            position: 'top-end',
                            icon: 'success',
                            title: 'Your work has been saved',
                            showConfirmButton: false,
                            timer: 1500
                        }).then((result) => {
                            window.location.href = '/Order/Index';
                        });

                    },
                    error: function (response) {
                        Swal.fire({
                            position: 'top-end',
                            icon: 'error',
                            title: 'Your work could not be saved',
                            showConfirmButton: false,
                            timer: 1500
                        }).then((result) => {
                            window.location.href = '/Order/Index';
                        });
                    },
                })
            }
        });

        
    </script>
}
